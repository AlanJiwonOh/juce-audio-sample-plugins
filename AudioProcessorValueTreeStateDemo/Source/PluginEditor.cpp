/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
AudioProcessorValueTreeStateDemoAudioProcessorEditor::AudioProcessorValueTreeStateDemoAudioProcessorEditor (AudioProcessorValueTreeStateDemoAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    createUI();

    nonlinmodeButton->setClickingTogglesState(true);
    postfiltmodeButton->setClickingTogglesState(true);
    
    // get elegant names from defined values
    clipLabel->setText(PARAM_NAME_CLIP, dontSendNotification);
    bitsLabel->setText(PARAM_NAME_BITS, dontSendNotification);
    samplerateLabel->setText(PARAM_NAME_SAMPLERATE, dontSendNotification);
    levelLabel->setText(PARAM_NAME_LEVEL, dontSendNotification);
    nonlinLabel->setText(PARAM_NAME_NONLIN, dontSendNotification);
    postfiltLabel->setText(PARAM_NAME_POSTFILT, dontSendNotification);
    
    nonlinmodeButton->setButtonText(processor.parameters.getParameter(PARAM_ID_NONLIN_MODE)->getText(processor.parameters.getParameter(PARAM_ID_NONLIN_MODE)->getValue(), 0));
    
    postfiltmodeButton->setButtonText(processor.parameters.getParameter(PARAM_ID_POSTFILT_MODE)->getText(processor.parameters.getParameter(PARAM_ID_POSTFILT_MODE)->getValue(), 0));
    
    // link UI to parameters
    clipParamAttach = new juce::AudioProcessorValueTreeState::SliderAttachment (processor.parameters, PARAM_ID_CLIP, *clipSlider);
    bitsParamAttach = new juce::AudioProcessorValueTreeState::SliderAttachment (processor.parameters, PARAM_ID_BITS, *bitsSlider);
    samplerateParamAttach = new juce::AudioProcessorValueTreeState::SliderAttachment (processor.parameters, PARAM_ID_SAMPLERATE, *samplerateSlider);
    levelParamAttach = new juce::AudioProcessorValueTreeState::SliderAttachment (processor.parameters, PARAM_ID_LEVEL, *levelSlider);
    nonlinParamAttach = new juce::AudioProcessorValueTreeState::SliderAttachment (processor.parameters, PARAM_ID_NONLIN, *nonlinSlider);
    postfiltParamAttach = new juce::AudioProcessorValueTreeState::SliderAttachment (processor.parameters, PARAM_ID_POSTFILT, *postfiltSlider);
    
    nonlinmodeParamAttach = new juce::AudioProcessorValueTreeState::ButtonAttachment (processor.parameters, PARAM_ID_NONLIN_MODE, *nonlinmodeButton);
    
    postfiltmodeParamAttach = new juce::AudioProcessorValueTreeState::ButtonAttachment (processor.parameters, PARAM_ID_POSTFILT_MODE, *postfiltmodeButton);
    
    
    setSize (410, 300);
}

AudioProcessorValueTreeStateDemoAudioProcessorEditor::~AudioProcessorValueTreeStateDemoAudioProcessorEditor()
{
    undoBtn->removeListener(this);
    redoBtn->removeListener(this);
    
    clipParamAttach = nullptr;
    bitsParamAttach = nullptr;
    samplerateParamAttach = nullptr;
    levelParamAttach = nullptr;
    nonlinParamAttach = nullptr;
    postfiltParamAttach = nullptr;
    nonlinmodeParamAttach = nullptr;
    postfiltmodeParamAttach = nullptr;
    
    destroyUI();
}

//==============================================================================
void AudioProcessorValueTreeStateDemoAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::blueviolet);
}

void AudioProcessorValueTreeStateDemoAudioProcessorEditor::createUI(){
    addAndMakeVisible (clipSlider = new Slider ("new slider"));
    clipSlider->setRange (0, 10, 0);
    clipSlider->setSliderStyle (Slider::Rotary);
    clipSlider->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
    clipSlider->addListener (this);
    
    addAndMakeVisible (clipLabel = new Label ("clipLabel",
                                              TRANS("clip")));
    clipLabel->setFont (Font (15.00f, Font::plain));
    clipLabel->setJustificationType (Justification::centred);
    clipLabel->setEditable (false, false, false);
    clipLabel->setColour (TextEditor::textColourId, Colours::black);
    clipLabel->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (bitsSlider = new Slider ("bitsSlider"));
    bitsSlider->setRange (0, 10, 0);
    bitsSlider->setSliderStyle (Slider::Rotary);
    bitsSlider->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
    bitsSlider->addListener (this);
    
    addAndMakeVisible (bitsLabel = new Label ("bitsLabel",
                                              TRANS("bits")));
    bitsLabel->setFont (Font (15.00f, Font::plain));
    bitsLabel->setJustificationType (Justification::centred);
    bitsLabel->setEditable (false, false, false);
    bitsLabel->setColour (TextEditor::textColourId, Colours::black);
    bitsLabel->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (samplerateSlider = new Slider ("samplerateSlider"));
    samplerateSlider->setRange (0, 10, 0);
    samplerateSlider->setSliderStyle (Slider::Rotary);
    samplerateSlider->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
    samplerateSlider->addListener (this);
    
    addAndMakeVisible (samplerateLabel = new Label ("samplerateLabel",
                                                    TRANS("samplerate")));
    samplerateLabel->setFont (Font (15.00f, Font::plain));
    samplerateLabel->setJustificationType (Justification::centred);
    samplerateLabel->setEditable (false, false, false);
    samplerateLabel->setColour (TextEditor::textColourId, Colours::black);
    samplerateLabel->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (levelSlider = new Slider ("levelSlider"));
    levelSlider->setRange (0, 10, 0);
    levelSlider->setSliderStyle (Slider::Rotary);
    levelSlider->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
    levelSlider->addListener (this);
    
    addAndMakeVisible (levelLabel = new Label ("levelLabel",
                                               TRANS("level")));
    levelLabel->setFont (Font (15.00f, Font::plain));
    levelLabel->setJustificationType (Justification::centred);
    levelLabel->setEditable (false, false, false);
    levelLabel->setColour (TextEditor::textColourId, Colours::black);
    levelLabel->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (nonlinSlider = new Slider ("nonlinSlider"));
    nonlinSlider->setRange (0, 10, 0);
    nonlinSlider->setSliderStyle (Slider::Rotary);
    nonlinSlider->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
    nonlinSlider->addListener (this);
    
    addAndMakeVisible (nonlinLabel = new Label ("nonlinLabel",
                                                TRANS("nonlin")));
    nonlinLabel->setFont (Font (15.00f, Font::plain));
    nonlinLabel->setJustificationType (Justification::centred);
    nonlinLabel->setEditable (false, false, false);
    nonlinLabel->setColour (TextEditor::textColourId, Colours::black);
    nonlinLabel->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (postfiltSlider = new Slider ("postfiltSlider"));
    postfiltSlider->setRange (0, 10, 0);
    postfiltSlider->setSliderStyle (Slider::Rotary);
    postfiltSlider->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
    postfiltSlider->addListener (this);
    
    addAndMakeVisible (postfiltLabel = new Label ("postfiltLabel",
                                                  TRANS("postfilt")));
    postfiltLabel->setFont (Font (15.00f, Font::plain));
    postfiltLabel->setJustificationType (Justification::centred);
    postfiltLabel->setEditable (false, false, false);
    postfiltLabel->setColour (TextEditor::textColourId, Colours::black);
    postfiltLabel->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (nonlinmodeButton = new TextButton ("nonlinmodeButton"));
    nonlinmodeButton->setButtonText (TRANS("S<>S&H"));
    nonlinmodeButton->addListener (this);
    
    addAndMakeVisible (postfiltmodeButton = new TextButton ("postfiltmodeButton"));
    postfiltmodeButton->setButtonText (TRANS("Even/Odd"));
    postfiltmodeButton->addListener (this);
    
    addAndMakeVisible (groupComponent = new GroupComponent ("new group",
                                                            TRANS("Preset Manager")));
    groupComponent->setTextLabelPosition (Justification::centred);
    
    addAndMakeVisible (undoBtn = new TextButton ("undoBtn"));
    undoBtn->setButtonText (TRANS("undo"));
    undoBtn->setConnectedEdges (Button::ConnectedOnLeft | Button::ConnectedOnRight | Button::ConnectedOnTop | Button::ConnectedOnBottom);
    undoBtn->addListener (this);
    undoBtn->setColour (TextButton::buttonColourId, Colours::red);
    
    addAndMakeVisible (redoBtn = new TextButton ("redoBtn"));
    redoBtn->setButtonText (TRANS("redo"));
    redoBtn->setConnectedEdges (Button::ConnectedOnLeft | Button::ConnectedOnRight | Button::ConnectedOnTop | Button::ConnectedOnBottom);
    redoBtn->addListener (this);
    redoBtn->setColour (TextButton::buttonColourId, Colours::chartreuse);
    
    addAndMakeVisible (label = new Label ("new label",
                                          TRANS("Last Action:")));
    label->setFont (Font (15.00f, Font::plain));
    label->setJustificationType (Justification::centredLeft);
    label->setEditable (false, false, false);
    label->setColour (TextEditor::textColourId, Colours::black);
    label->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (actionText = new Label ("actionText",
                                               TRANS("label text")));
    actionText->setFont (Font (15.00f, Font::plain));
    actionText->setJustificationType (Justification::centredLeft);
    actionText->setEditable (false, false, false);
    actionText->setColour (TextEditor::textColourId, Colours::black);
    actionText->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
}

void AudioProcessorValueTreeStateDemoAudioProcessorEditor::destroyUI()
{
    clipSlider = nullptr;
    clipLabel = nullptr;
    bitsSlider = nullptr;
    bitsLabel = nullptr;
    samplerateSlider = nullptr;
    samplerateLabel = nullptr;
    levelSlider = nullptr;
    levelLabel = nullptr;
    nonlinSlider = nullptr;
    nonlinLabel = nullptr;
    postfiltSlider = nullptr;
    postfiltLabel = nullptr;
    nonlinmodeButton = nullptr;
    postfiltmodeButton = nullptr;
    groupComponent = nullptr;
    undoBtn = nullptr;
    redoBtn = nullptr;
    label = nullptr;
    actionText = nullptr;
}

void AudioProcessorValueTreeStateDemoAudioProcessorEditor::resizeUI()
{
    clipSlider->setBounds (0, 0, 100, 100);
    clipLabel->setBounds (0, 101, 100, 24);
    bitsSlider->setBounds (101, 0, 100, 100);
    bitsLabel->setBounds (101, 101, 100, 24);
    samplerateSlider->setBounds (201, 0, 100, 100);
    samplerateLabel->setBounds (201, 101, 100, 24);
    levelSlider->setBounds (301, 0, 100, 100);
    levelLabel->setBounds (301, 101, 100, 24);
    nonlinSlider->setBounds (0, 125, 100, 100);
    nonlinLabel->setBounds (0, 225, 100, 24);
    postfiltSlider->setBounds (201, 125, 100, 100);
    postfiltLabel->setBounds (201, 225, 100, 24);
    nonlinmodeButton->setBounds (101, 125, 100, 100);
    postfiltmodeButton->setBounds (301, 125, 100, 100);
    groupComponent->setBounds (0, 250, 410, 64);
    undoBtn->setBounds (16, 272, 40, 24);
    redoBtn->setBounds (56, 272, 40, 24);
    label->setBounds (104, 272, 104, 24);
    actionText->setBounds (192, 272, 208, 24);
}

void AudioProcessorValueTreeStateDemoAudioProcessorEditor::sliderValueChanged (Slider* sliderThatWasMoved)
{
    //[UsersliderValueChanged_Pre]
    //[/UsersliderValueChanged_Pre]
    
    if (sliderThatWasMoved == clipSlider)
    {
        //[UserSliderCode_clipSlider] -- add your slider handling code here..
        //[/UserSliderCode_clipSlider]
    }
    else if (sliderThatWasMoved == bitsSlider)
    {
        //[UserSliderCode_bitsSlider] -- add your slider handling code here..
        //[/UserSliderCode_bitsSlider]
    }
    else if (sliderThatWasMoved == samplerateSlider)
    {
        //[UserSliderCode_samplerateSlider] -- add your slider handling code here..
        //[/UserSliderCode_samplerateSlider]
    }
    else if (sliderThatWasMoved == levelSlider)
    {
        //[UserSliderCode_levelSlider] -- add your slider handling code here..
        //[/UserSliderCode_levelSlider]
    }
    else if (sliderThatWasMoved == nonlinSlider)
    {
        //[UserSliderCode_nonlinSlider] -- add your slider handling code here..
        //[/UserSliderCode_nonlinSlider]
    }
    else if (sliderThatWasMoved == postfiltSlider)
    {
        //[UserSliderCode_postfiltSlider] -- add your slider handling code here..
        //[/UserSliderCode_postfiltSlider]
    }

    //[UsersliderValueChanged_Post]
    //[/UsersliderValueChanged_Post]
}

void AudioProcessorValueTreeStateDemoAudioProcessorEditor::buttonClicked (Button* buttonThatWasClicked)
{
    //[UserbuttonClicked_Pre]
    //[/UserbuttonClicked_Pre]
    
    if (buttonThatWasClicked == nonlinmodeButton)
    {
        //[UserButtonCode_nonlinmodeButton] -- add your button handler code here..
        nonlinmodeButton->setButtonText(processor.parameters.getParameter(PARAM_ID_NONLIN_MODE)->getText(processor.parameters.getParameter(PARAM_ID_NONLIN_MODE)->getValue(), 0));
        //[/UserButtonCode_nonlinmodeButton]
    }
    else if (buttonThatWasClicked == postfiltmodeButton)
    {
        //[UserButtonCode_postfiltmodeButton] -- add your button handler code here..
        postfiltmodeButton->setButtonText(processor.parameters.getParameter(PARAM_ID_POSTFILT_MODE)->getText(processor.parameters.getParameter(PARAM_ID_POSTFILT_MODE)->getValue(), 0));
        //[/UserButtonCode_postfiltmodeButton]
    }
    else if (buttonThatWasClicked == undoBtn)
    {
        if (processor.parameters.undoManager->canUndo()) {
        processor.parameters.undoManager->undo();
        actionText->setText(processor.parameters.undoManager->getCurrentTransactionName(), dontSendNotification);
        }
        else{
                    actionText->setText("can't undo", dontSendNotification);
        }
    }
    else if (buttonThatWasClicked == redoBtn)
    {
        processor.parameters.undoManager->redo();
        actionText->setText(processor.parameters.undoManager->getCurrentTransactionName(), dontSendNotification);
    }
    
    //[UserbuttonClicked_Post]
    //[/UserbuttonClicked_Post]
}


void AudioProcessorValueTreeStateDemoAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    resizeUI();
}
