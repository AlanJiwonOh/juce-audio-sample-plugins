/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
WaveformPluginAudioProcessorEditor::WaveformPluginAudioProcessorEditor (WaveformPluginAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    
//    _contextOpenGL.attachTo (*this);
//    _contextOpenGL.setContinuousRepainting(true);
    
    processor.addChangeListener(this);
    
    waveformComponent.clearWaveformBuffer();
    addAndMakeVisible(waveformComponent);
    waveformComponent.setBounds(0, 0, 400, 300);
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
}

WaveformPluginAudioProcessorEditor::~WaveformPluginAudioProcessorEditor()
{
    processor.shouldPassToUI = false;
    processor.removeChangeListener(this);
//    _contextOpenGL.detach();
}

void WaveformPluginAudioProcessorEditor::visibilityChanged(){
    if (isVisible()){
        DBG("plug-in ui is VISIBLE.");
        waveformComponent.clearWaveformBuffer();
        processor.shouldPassToUI = true;
    }
    else{
        DBG("plug-in ui is HIDDEN.");
        waveformComponent.clearWaveformBuffer();
        processor.shouldPassToUI = false;
        processor.waveformBuffer.empty();
    }
    
}
//==============================================================================
void WaveformPluginAudioProcessorEditor::changeListenerCallback (ChangeBroadcaster *source){
         waveformComponent.onWaveformUpdate(processor.waveformBuffer,processor.lastKnownBufferSize);
}

void WaveformPluginAudioProcessorEditor::paint (Graphics& g)
{
}

void WaveformPluginAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
}
